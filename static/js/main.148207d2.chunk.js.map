{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","handleSubmit","e","preventDefault","trim","length","values","onSubmit","type","value","placeholder","onChange","target","className","spellCheck","onClick","GifGridItem","title","url","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","prototype","PropTypes","string","isRequired","GifExpertApp","categories","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAO1CC,EAAe,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAAoB,mBAAfN,IAClCF,GAAc,SAACS,GAAD,OAAaP,GAAb,mBAA4BO,OAC1CN,EAAc,MAIlB,OACE,uBAAMO,SAAUN,EAAhB,UACE,uBACEO,KAAK,OACLC,MAAOV,EACPW,YAAY,iBACZC,SAlBoB,SAACT,GACzBF,EAAcE,EAAEU,OAAOH,QAkBnBI,UAAU,kBACVC,WAAW,UAEb,wBAAQD,UAAU,mBAAmBE,QAASd,EAA9C,wB,QCzBOe,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,sBAAKL,UAAU,2CAAf,UACE,qBAAKM,IAAKD,EAAKE,IAAKH,IACpB,qBAAKJ,UAAU,YAAf,SACE,+BAAOI,U,uBCQAI,EAhBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACA,GACF,mCACNL,EAHQ,iDAGwCI,EAHxC,kBACA,GADA,oBAEF,oCAFE,SAIKE,MAAMN,GAJX,cAIRO,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRd,MAAOa,EAAIb,MACXC,IAAG,UAAEY,EAAIE,cAAN,aAAE,EAAYC,iBAAiBf,QAVxB,kBAaPU,GAbO,4CAAH,sD,OCKAM,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEVU,ECJY,SAACV,GAAc,IAAD,EACZxB,mBAAS,CAC/B6B,KAAM,GACNQ,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAK,SAACC,GACpBH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGlB,CAACb,IAEGc,EDXgBK,CAAanB,GAA9BK,KAER,OACE,qCACE,6BAAKL,IACL,qBAAKT,UAAU,YAAf,SACGmB,EAAOH,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aAOhCG,EAAQQ,UAAY,CAClBpB,S,OAAUqB,EAAUC,OAAOC,YElBtB,IAAMC,EAAe,WAAO,IAAD,EACIhD,mBAAS,CAAC,iBADd,mBACzBiD,EADyB,KACblD,EADa,KAEhC,OACE,gCACE,sBAAKgB,UAAU,mBAAf,UACE,kDACA,cAAC,EAAD,CAAahB,cAAeA,IAC5B,mBAAGgB,UAAU,YAAb,oDACA,sBAAKA,UAAU,2BAAf,4BAEE,mBAAGA,UAAU,iBAAb,SACGkC,EAAWlB,KAAI,SAACP,EAAU0B,GAAX,OACd,uBAAMnC,UAAU,aAAhB,eACKS,EADL,OAAkCA,EAAS0B,cAOnD,qBAAKnC,UAAU,iBAAf,SACGkC,EAAWlB,KAAI,SAACP,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCbT2B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACEC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.148207d2.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setinputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2 && inputValue !== \"Enter your gif\") {\r\n      setCategories((values) => [inputValue, ...values]);\r\n      setinputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        placeholder=\"Enter your gif\"\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        spellCheck=\"false\"\r\n      />\r\n      <button className=\"button-container\" onClick={handleSubmit}>\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInUp\">\r\n      <img src={url} alt={title}></img>\r\n      <div className=\"card-text\">\r\n        <span>{title}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n};\r\n","const getGifs = async (category) => {\r\n  const limit = 10;\r\n  const key = \"4b73wWqZZYOc6qqOgg8vagiSpZPGmZSB\";\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=${limit}&api_key=${key}`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n\r\nexport default getGifs;","import React from \"react\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data: images } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.prototype = { \r\n  category: PropTypes.string.isRequired,\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport getGifs from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then((imgs) => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from \"./GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"The simpsons\"]);\r\n  return (\r\n    <div>\r\n      <div className=\"search-container\">\r\n        <h2>GIF SEARCHER APP</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n        <p className=\"paragraph\">Find the gif what you are looking for!</p>\r\n        <div className=\"recent-searchs-container\">\r\n          Recent searchs:\r\n          <p className=\"recent-searchs\">\r\n            {categories.map((category, index) => (\r\n              <span className=\"result-key\" key={category+index}>\r\n                [ {category} ]\r\n              </span>\r\n            ))}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"grid-container\">\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './components/GifExpertApp'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( \n  <GifExpertApp /> ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}